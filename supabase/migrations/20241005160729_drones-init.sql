create table "public"."drones" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "frame_id" bigint not null,
    "nickname" character varying,
    "status" smallint not null,
    "image" character varying
);


alter table "public"."drones" enable row level security;

create table "public"."frames" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" character varying not null,
    "manufacturer_id" bigint
);


alter table "public"."frames" enable row level security;

create table "public"."manufacturers" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" character varying not null
);


alter table "public"."manufacturers" enable row level security;

CREATE UNIQUE INDEX drones_pkey ON public.drones USING btree (id);

CREATE UNIQUE INDEX frames_pkey ON public.frames USING btree (id);

CREATE UNIQUE INDEX manufacturers_name_key ON public.manufacturers USING btree (name);

CREATE UNIQUE INDEX manufacturers_pkey ON public.manufacturers USING btree (id);

alter table "public"."drones" add constraint "drones_pkey" PRIMARY KEY using index "drones_pkey";

alter table "public"."frames" add constraint "frames_pkey" PRIMARY KEY using index "frames_pkey";

alter table "public"."manufacturers" add constraint "manufacturers_pkey" PRIMARY KEY using index "manufacturers_pkey";

alter table "public"."drones" add constraint "drones_frame_fkey" FOREIGN KEY (frame_id) REFERENCES frames(id) not valid;

alter table "public"."drones" validate constraint "drones_frame_fkey";

alter table "public"."frames" add constraint "frames_manufacturer_fkey" FOREIGN KEY (manufacturer_id) REFERENCES manufacturers(id) not valid;

alter table "public"."frames" validate constraint "frames_manufacturer_fkey";

alter table "public"."manufacturers" add constraint "manufacturers_name_key" UNIQUE using index "manufacturers_name_key";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.after_insert_refresh_nickname()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  PERFORM refresh_drone_nickname(NEW.id::int8);
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.after_refresh_nickname()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  PERFORM refresh_drone_nickname(NEW.id::int8);
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.before_update_refresh_nickname()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  IF (NEW.nickname IS NULL OR NEW.nickname = '') THEN
    PERFORM refresh_drone_nickname(NEW.id::int8);
  END IF;
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.refresh_drone_nickname(drone_id bigint)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
  new_nickname TEXT;
  current_nickname TEXT;
BEGIN
  -- Fetch the current nickname and calculate the new one
  SELECT dr.nickname, CONCAT_WS(' ', COALESCE(mf.name, ''), fr.name)
  INTO current_nickname, new_nickname
  FROM drones dr
  JOIN frames fr ON fr.id = dr.frame_id
  LEFT JOIN manufacturers mf ON fr.manufacturer_id = mf.id
  WHERE dr.id = drone_id;

  -- Update if the current nickname is null, empty, or different from the new one
  IF current_nickname IS DISTINCT FROM new_nickname THEN
    UPDATE drones SET nickname = new_nickname WHERE id = drone_id;
  END IF;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_nicknames_on_frame_change()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  -- Update nicknames for all drones affected by the frame name change
  UPDATE drones
  SET nickname = CONCAT_WS(' ', COALESCE(mf.name, ''), NEW.name)
  FROM manufacturers mf
  WHERE drones.frame_id = NEW.id
    AND (mf.id = NEW.manufacturer_id OR NEW.manufacturer_id IS NULL)
    AND (
      drones.nickname IS NULL OR 
      drones.nickname = '' OR 
      drones.nickname = OLD.name OR 
      drones.nickname = CONCAT_WS(' ', COALESCE(mf.name, ''), OLD.name)
    );

  RETURN NULL;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_nicknames_on_frame_or_manufacturer_change()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  -- Trigger refresh of nicknames for all drones using this frame
  PERFORM refresh_drone_nickname(dr.id)
  FROM drones dr
  WHERE dr.frame_id = NEW.id;

  RETURN NULL;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.update_nicknames_on_manufacturer_change()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  -- Update nicknames for all drones affected by the manufacturer name change
  UPDATE drones
  SET nickname = CONCAT_WS(' ', NEW.name, fr.name)
  FROM frames fr
  WHERE drones.frame_id = fr.id
    AND fr.manufacturer_id = NEW.id
    AND (
      drones.nickname IS NULL OR 
      drones.nickname = '' OR 
      drones.nickname = fr.name OR 
      drones.nickname = CONCAT_WS(' ', OLD.name, fr.name)
    );

  RETURN NULL;
END;
$function$
;

grant delete on table "public"."drones" to "anon";

grant insert on table "public"."drones" to "anon";

grant references on table "public"."drones" to "anon";

grant select on table "public"."drones" to "anon";

grant trigger on table "public"."drones" to "anon";

grant truncate on table "public"."drones" to "anon";

grant update on table "public"."drones" to "anon";

grant delete on table "public"."drones" to "authenticated";

grant insert on table "public"."drones" to "authenticated";

grant references on table "public"."drones" to "authenticated";

grant select on table "public"."drones" to "authenticated";

grant trigger on table "public"."drones" to "authenticated";

grant truncate on table "public"."drones" to "authenticated";

grant update on table "public"."drones" to "authenticated";

grant delete on table "public"."drones" to "service_role";

grant insert on table "public"."drones" to "service_role";

grant references on table "public"."drones" to "service_role";

grant select on table "public"."drones" to "service_role";

grant trigger on table "public"."drones" to "service_role";

grant truncate on table "public"."drones" to "service_role";

grant update on table "public"."drones" to "service_role";

grant delete on table "public"."frames" to "anon";

grant insert on table "public"."frames" to "anon";

grant references on table "public"."frames" to "anon";

grant select on table "public"."frames" to "anon";

grant trigger on table "public"."frames" to "anon";

grant truncate on table "public"."frames" to "anon";

grant update on table "public"."frames" to "anon";

grant delete on table "public"."frames" to "authenticated";

grant insert on table "public"."frames" to "authenticated";

grant references on table "public"."frames" to "authenticated";

grant select on table "public"."frames" to "authenticated";

grant trigger on table "public"."frames" to "authenticated";

grant truncate on table "public"."frames" to "authenticated";

grant update on table "public"."frames" to "authenticated";

grant delete on table "public"."frames" to "service_role";

grant insert on table "public"."frames" to "service_role";

grant references on table "public"."frames" to "service_role";

grant select on table "public"."frames" to "service_role";

grant trigger on table "public"."frames" to "service_role";

grant truncate on table "public"."frames" to "service_role";

grant update on table "public"."frames" to "service_role";

grant delete on table "public"."manufacturers" to "anon";

grant insert on table "public"."manufacturers" to "anon";

grant references on table "public"."manufacturers" to "anon";

grant select on table "public"."manufacturers" to "anon";

grant trigger on table "public"."manufacturers" to "anon";

grant truncate on table "public"."manufacturers" to "anon";

grant update on table "public"."manufacturers" to "anon";

grant delete on table "public"."manufacturers" to "authenticated";

grant insert on table "public"."manufacturers" to "authenticated";

grant references on table "public"."manufacturers" to "authenticated";

grant select on table "public"."manufacturers" to "authenticated";

grant trigger on table "public"."manufacturers" to "authenticated";

grant truncate on table "public"."manufacturers" to "authenticated";

grant update on table "public"."manufacturers" to "authenticated";

grant delete on table "public"."manufacturers" to "service_role";

grant insert on table "public"."manufacturers" to "service_role";

grant references on table "public"."manufacturers" to "service_role";

grant select on table "public"."manufacturers" to "service_role";

grant trigger on table "public"."manufacturers" to "service_role";

grant truncate on table "public"."manufacturers" to "service_role";

grant update on table "public"."manufacturers" to "service_role";

create policy "Enable r/w for users based on user_id"
on "public"."documents"
as permissive
for all
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."drones"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."frames"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."manufacturers"
as permissive
for select
to public
using (true);


CREATE TRIGGER insert_refresh_drone_nickname_trigger AFTER INSERT ON public.drones FOR EACH ROW EXECUTE FUNCTION after_refresh_nickname();

CREATE TRIGGER update_refresh_drone_nickname_trigger AFTER UPDATE ON public.drones FOR EACH ROW EXECUTE FUNCTION after_refresh_nickname();

CREATE TRIGGER frame_manufacturer_change AFTER UPDATE ON public.frames FOR EACH ROW WHEN (((old.manufacturer_id IS DISTINCT FROM new.manufacturer_id) OR ((old.name)::text IS DISTINCT FROM (new.name)::text))) EXECUTE FUNCTION update_nicknames_on_frame_or_manufacturer_change();

CREATE TRIGGER frame_name_change AFTER UPDATE ON public.frames FOR EACH ROW WHEN ((((old.name)::text IS DISTINCT FROM (new.name)::text) OR (old.manufacturer_id IS DISTINCT FROM new.manufacturer_id))) EXECUTE FUNCTION update_nicknames_on_frame_change();

CREATE TRIGGER manufacturer_name_change AFTER UPDATE ON public.manufacturers FOR EACH ROW WHEN (((old.name)::text IS DISTINCT FROM (new.name)::text)) EXECUTE FUNCTION update_nicknames_on_manufacturer_change();


