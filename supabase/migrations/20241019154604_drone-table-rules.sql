drop trigger if exists "insert_refresh_drone_nickname_trigger" on "public"."drones";

drop policy "Enable read access for all users" on "public"."drones";

drop policy "Enable read access for all users" on "public"."frames";

drop policy "Enable read access for all users" on "public"."manufacturers";

create table "public"."frame_variants" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "frame_id" bigint not null,
    "prop_size" real not null,
    "layout" smallint not null
);


alter table "public"."drones" add column "user_id" uuid not null default auth.uid();

alter table "public"."drones" alter column "status" set default '0'::smallint;

alter table "public"."frames" add column "is_public" boolean not null default false;

alter table "public"."frames" add column "user_id" uuid not null default auth.uid();

alter table "public"."frames" disable row level security;

alter table "public"."manufacturers" add column "is_public" boolean not null default false;

alter table "public"."manufacturers" add column "user_id" uuid not null default auth.uid();

alter table "public"."manufacturers" disable row level security;

CREATE UNIQUE INDEX frame_variants_pkey ON public.frame_variants USING btree (id);

alter table "public"."frame_variants" add constraint "frame_variants_pkey" PRIMARY KEY using index "frame_variants_pkey";

alter table "public"."frame_variants" add constraint "frame_variants_frame_id_fkey" FOREIGN KEY (frame_id) REFERENCES frames(id) not valid;

alter table "public"."frame_variants" validate constraint "frame_variants_frame_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.after_insert_refresh_nickname()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
  RAISE NOTICE 'Trigger called. NEW.id: %, NEW.nickname: %', NEW.id, NEW.nickname;
  PERFORM refresh_drone_nickname(NEW.id::int8);
  RETURN NEW;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.refresh_drone_nickname(drone_id bigint)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
  new_nickname TEXT;
  current_nickname TEXT;
BEGIN
  -- Fetch the current nickname and calculate the new one
  SELECT dr.nickname, CONCAT_WS(' ', COALESCE(mf.name, ''), fr.name)
  INTO current_nickname, new_nickname
  FROM drones dr
  JOIN frames fr ON fr.id = dr.frame_id
  LEFT JOIN manufacturers mf ON fr.manufacturer_id = mf.id
  WHERE dr.id = drone_id;

  -- Update if the current nickname is null, empty, or different from the new one
  IF (current_nickname IS NULL OR current_nickname = '' OR current_nickname IS DISTINCT FROM new_nickname) THEN
    UPDATE drones SET nickname = new_nickname WHERE id = drone_id;
  END IF;
END;
$function$
;

grant delete on table "public"."frame_variants" to "anon";

grant insert on table "public"."frame_variants" to "anon";

grant references on table "public"."frame_variants" to "anon";

grant select on table "public"."frame_variants" to "anon";

grant trigger on table "public"."frame_variants" to "anon";

grant truncate on table "public"."frame_variants" to "anon";

grant update on table "public"."frame_variants" to "anon";

grant delete on table "public"."frame_variants" to "authenticated";

grant insert on table "public"."frame_variants" to "authenticated";

grant references on table "public"."frame_variants" to "authenticated";

grant select on table "public"."frame_variants" to "authenticated";

grant trigger on table "public"."frame_variants" to "authenticated";

grant truncate on table "public"."frame_variants" to "authenticated";

grant update on table "public"."frame_variants" to "authenticated";

grant delete on table "public"."frame_variants" to "service_role";

grant insert on table "public"."frame_variants" to "service_role";

grant references on table "public"."frame_variants" to "service_role";

grant select on table "public"."frame_variants" to "service_role";

grant trigger on table "public"."frame_variants" to "service_role";

grant truncate on table "public"."frame_variants" to "service_role";

grant update on table "public"."frame_variants" to "service_role";

create policy "Allow READ for owner"
on "public"."drones"
as permissive
for select
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable UPDATE for users based on user_id"
on "public"."drones"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for users based on user_id"
on "public"."drones"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) = user_id));


CREATE TRIGGER insert_refresh_drone_nickname_trigger AFTER INSERT ON public.drones FOR EACH ROW EXECUTE FUNCTION after_insert_refresh_nickname();


