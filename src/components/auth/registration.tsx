/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/vZcFuffKRf3
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { DiscordIcon } from "../icons/discord-icon";
import { ChromeIcon } from "../icons/chrome-icon";
import { FacebookIcon } from "../icons/facebook-icon";
import { AuthWrapper } from "./auth-wrapper";
import { useState, useCallback } from "react";
import { toast } from "sonner";
import { getSupabase } from "@/lib/supabase";
import { Loader2 } from "lucide-react";

interface Props {
  onWantsToLogin: () => void;
}
export function Registration(props: Props) {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [passwordConfirmation, setPasswordConfirmation] = useState("");
  const [emailSignUpInProgress, setEmailSignUpInProgress] = useState(false);

  const [supabase] = useState(getSupabase());

  const handleEmailRegistrationFormSubmit: React.FormEventHandler<HTMLFormElement> =
    useCallback(
      async (e) => {
        e.preventDefault();

        if (password !== passwordConfirmation) {
          toast.error("Passwords do not match");
          return;
        }

        setEmailSignUpInProgress(true);
        const { error } = await supabase.auth.signUp({
          email,
          password,
        });
        setEmailSignUpInProgress(false);

        if (error) {
          toast.error(`Oh no, something went wrong: ${error.message}`);
          console.error(error);
          return;
        }

        toast.success(
          "You're all set! We've send you an email to verify your account."
        );

        setEmail("");
        setPassword("");
        setPasswordConfirmation("");
      },
      [
        supabase,
        email,
        password,
        passwordConfirmation,
        setEmail,
        setPassword,
        setPasswordConfirmation,
        setEmailSignUpInProgress,
      ]
    );

  return (
    <AuthWrapper title="Create an account">
      <div className="space-y-2">
        <Button className="w-full" variant="outline">
          <FacebookIcon className="mr-2 h-4 w-4" />
          Sign up with Facebook
        </Button>
        <Button className="w-full" variant="outline">
          <ChromeIcon className="mr-2 h-4 w-4" />
          Sign up with Google
        </Button>
        <Button className="w-full" variant="outline">
          <DiscordIcon className="mr-2 h-4 w-4" />
          Sign up with Discord
        </Button>
      </div>
      <div className="relative">
        <div className="absolute inset-0 flex items-center">
          <span className="w-full border-t" />
        </div>
        <div className="relative flex justify-center text-xs uppercase">
          <span className="bg-white px-2 text-gray-500 dark:bg-gray-900 dark:text-gray-400">
            Or continue with
          </span>
        </div>
      </div>
      <form className="space-y-4" onSubmit={handleEmailRegistrationFormSubmit}>
        <div>
          <Label htmlFor="email">Email</Label>
          <Input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        <div>
          <Label htmlFor="password">Password</Label>
          <Input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        <div>
          <Label htmlFor="passwordConfirmation">Confirm password</Label>
          <Input
            id="passwordConfirmation"
            type="password"
            value={passwordConfirmation}
            onChange={(e) => setPasswordConfirmation(e.target.value)}
            required
          />
        </div>

        <Button
          className="w-full"
          type="submit"
          disabled={emailSignUpInProgress}
        >
          {emailSignUpInProgress && (
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          )}
          Create account
        </Button>
      </form>

      <div className="flex items-center justify-between">
        <Button
          variant="ghost"
          className="text-sm font-medium text-gray-900 hover:underline dark:text-gray-50"
          onClick={props.onWantsToLogin}
        >
          Already have an account?
        </Button>
      </div>
    </AuthWrapper>
  );
}
